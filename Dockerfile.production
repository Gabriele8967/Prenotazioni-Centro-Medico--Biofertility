# Dockerfile ottimizzato per Server Proprietario Privato
# Multi-stage build per performance ottimali

# Stage 1: Build dependencies
FROM node:18-alpine AS dependencies
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev for build)
RUN npm ci --include=dev

# Copy source code
COPY . .

# Stage 2: Build application
FROM node:18-alpine AS builder
WORKDIR /app

# Copy dependencies
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/package*.json ./

# Copy source code
COPY . .

# Build application (if needed)
RUN npm run build

# Stage 3: Production runtime
FROM node:18-alpine AS runtime

# Install system dependencies
RUN apk add --no-cache \
    curl \
    tini \
    dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodeuser -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# Copy built application
COPY --from=builder --chown=nodeuser:nodejs /app/server.js ./
COPY --from=builder --chown=nodeuser:nodejs /app/config ./config/
COPY --from=builder --chown=nodeuser:nodejs /app/controllers ./controllers/
COPY --from=builder --chown=nodeuser:nodejs /app/routes ./routes/
COPY --from=builder --chown=nodeuser:nodejs /app/services ./services/
COPY --from=builder --chown=nodeuser:nodejs /app/models ./models/
COPY --from=builder --chown=nodeuser:nodejs /app/public ./public/

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads && \
    chown -R nodeuser:nodejs /app/logs /app/uploads

# Switch to non-root user
USER nodeuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Use tini for proper signal handling
ENTRYPOINT ["tini", "--"]

# Start application
CMD ["node", "server.js"]